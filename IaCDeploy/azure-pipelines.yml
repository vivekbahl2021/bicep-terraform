# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

parameters:
  - name: RG
    default: resgrpazaiserv
    type: string
    values:
      - "resgrpazaiserv"
      - "rsgbcp706"
  - name: environment
    displayName: "Environment"
    default: "dev"
    type: string
    values:
      - "dev"
      - "test"
      - "prod"
  - name: sequenceNumber
    displayName: "Sequence number to use in resource naming"
    default: '01'
  
      
#variables:
#  RG: 'rsgbcp605'

jobs:
  - job: Deploy
    variables:
    - template: "${{parameters.environment}}/pipelineparams.${{parameters.environment}}.yaml"
    - name: bicepFilePath
      value: "$(Build.SourcesDirectory)/IaCDeploy/main.bicep"

    steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'Azure subscription 1 (d6015563-af1d-45a6-98c1-5c3169cb9573)'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Read the byte array from a file (replace with your own method)
            $byteArray = [System.IO.File]::ReadAllBytes("$(Build.SourcesDirectory)/IaCDeploy/portalazure.cer")
            
            # Convert the byte array to a Base64-encoded string
            $base64String = [System.Convert]::ToBase64String($byteArray)
            Write-Host $base64String
            Write-Host "##vso[task.setvariable variable=ccontet]$base64String"
            Write-Host "Snd time : ${env:ccontet}"  
            
      - task: CmdLine@2
        inputs:
          script: |
              echo "$(ccontet)"    
                  
              echo Hello world                 
      - task: AzureCLI@2
        displayName: "cert content"
        inputs:
            azureSubscription: 'Azure subscription 1 (d6015563-af1d-45a6-98c1-5c3169cb9573)'
            scriptType: 'pscore'
            scriptLocation: 'inlineScript'
            inlineScript: 'Write-Host "third time : $(ccontet)"'  
      
      - task: AzureCLI@2
        displayName: "What-if command"
        continueOnError: true
        inputs:
          azureSubscription: 'Azure subscription 1 (d6015563-af1d-45a6-98c1-5c3169cb9573)'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          failOnStandardError: false
          inlineScript: |
            Write-Host "##vso[task.setvariable variable=ccontet]$base64String"
            $result=$(az deployment group what-if --name "what-if-101" --template-file ${{variables.bicepFilePath}} -g ${{parameters.RG}} -p certificateContent="$(ccontet)")
            Write-Host "##vso[task.setvariable variable=azurecliresult]$result"
      
      - task: AzureCLI@2
        displayName: "What-if Command Output"
        inputs:
          azureSubscription: 'Azure subscription 1 (d6015563-af1d-45a6-98c1-5c3169cb9573)'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
             'Write-Host "Azure CLI Result: $(azurecliresult)"' 
      # - task: AzureResourceManagerTemplateDeployment@3
      #   displayName: 'Deploy Bicep Files'#        
      #   inputs:
      #     deploymentScope: 'Resource Group'
      #     azureResourceManagerConnection: 'Azure subscription 1(d6015563-af1d-45a6-98c1-5c3169cb9573)'
      #     subscriptionId: 'd6015563-af1d-45a6-98c1-5c3169cb9573'
      #     action: 'Create Or Update Resource Group'
      #     resourceGroupName: ${{parameters.RG}}
      #     location: 'East US'
      #     #templateLocation: 'Linked artifact'
      #     csmFile: ${{variables.bicepFilePath}}
      #     deploymentOutputs: deploymentOutputs
      #     overrideParameters: -certificateContent "$(ccontet)"
